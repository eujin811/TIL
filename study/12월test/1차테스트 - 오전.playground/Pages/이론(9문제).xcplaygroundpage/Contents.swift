//: [Previous](@previous)
import UIKit

/*
 1. Array, Set, Dictionary 의 차이점에 대해 설명하고 예시 코드 작성
*/
//Array: index 있음. 값 중복 가능, 정해진 타입으로받음.
var arr = [String]()

//set: 집합, 중복 안됨.
var set1: Set = ["kkk"]

//Dictionary : key - value 쌍으로 저장. key는 중복 불가능하지만 value는 중복 가능
var dic = [String : Int]()
/***************************************************
 2. Value Type, Reference Type 에 대한 예시와 그 차이점에 대해 설명
 ***************************************************/

//value Type : 값 타입, 값 그대로 사용

//reference Type : 참조 타입, 값이 들어있는 주소 사용

/***************************************************
 3. Application의 LifeCycle의 각 상태에 대해 설명
 ***************************************************/
 //Not running : 아직 실행되지 않은 상태
// Inactive : 포그라운드에서 앱이 실행중이지만 앱 상태 전환등의 이유로 이벤트 못받는 상태
// Active : 포그라운드에서 앱이 실행중이며 이벤트를 정상적으로 수신받을 수 있는 상태
// Background : 백그라운드에서 앱이 실행중인 상태/ suspended 상태로 넘어가기 직전 잠시 머무는 단계
//suspended : 앱이 백그라운드에 있고 메모리에 남아있지만 어떤 코드도 수행중이지 않은 상태. 메모리 부족시 강제 종료될 수 있음.


/***************************************************
 4. ViewController LifeCycle의 각 상태에 대해 설명
 ***************************************************/

//viewDidLoad : view가 로드되는 상태
//viewWillAppear: view가 보이기 직전
//viewDidAppear: view가 보인 직후
//viewWillDisappear: view가 사라지기 직전
//viewDidDisappear: view가 사라진 직후

/***************************************************
 5. 다음 4개의 키워드 (continue, break, return, fallthrough)가 쓰이는 위치와 역할에 대해 각각 설명
 ***************************************************/
/*
 continue - 현재 반복문 멈추고 다음 반복으로 넘어감.
 break - 현재 반목문이나 switch문 멈춤
 return - 함수 멈춤. 값을 return
 falthrough - switch문에서 case 맞더라도 다음 케이스로 넘어갈 수 있게 한다.
 */


/***************************************************
 6. Init 메서드가 필요한 경우와 그렇지 않은 경우의 차이점에 대해 설명
 ***************************************************/

//init 필요한 경우 - 클래스나 구조체등의 내부 변수나 상수의 값이 초기화 되지 않았고 나중에 초기화 하고 싶을 때
//init 불필요한 경우 - 클래스나 구조체등의 내부 변수나 상수의 값이 이미 초기화 된 경우.

/***************************************************
 7. Access Level 을 각 단계별로 나열하고 그 차이점에 대해 설명
 ***************************************************/
/*
 open - 외부 모듈에서 접근 가능하며 오버라이드 가능
 public - 외부 모듈에서 접근 가능하지만 오버라이드 불가능
 Internal - 해당 모듈 내에서만 접근 가능
 FilePrivate - 해당 파일 내에서만 접근 가능.
 private - 해당 스코프 내에서만 접근 가능.
 */


/***************************************************
 8. OOP 4대 특성에 대해 나열하고 각 특성에 대해 아는 만큼 설명 및 예시 코드 작성
 ***************************************************/


// 4대 특성 추상화, 상속, 다형성, 캡슐화
 
 //추상화 :
protocol abs {
    var ak: String {get}
    func didTapButton()
}
//상속: + 다형성
class father {
    let familyName = "kim"
    
    func 소개() {
        print("내 이름은. \(familyName)")
    }
}
class youjin: father {
    let name = "Youjin"
    override func 소개() {
        print("내이름은 \(familyName) \(name)")
    }
}
let name = youjin()
name.소개()


//다형성: 오버라이딩 위에서 오버로딩
func kk(name: String){
    print(name)
}
func kk(name: Int){
    print(name)
}

//캡슐화:

class jinjin {
    private let name = "kkk"
}

/***************************************************
 9. Frame 과 Bounds가 무엇이고, 둘의 차이점은 어떤 것이 있는지 설명
 ***************************************************/

/*
 frame: 시작점은 super뷰의 원점(0,0) 원점 변경시 자기 자신과 하위 뷰 이동
 bound: 시작점은 내의 원점 (0,0) 원점 변경시 하위뷰 이동
 */


/***************************************************
 위 개념들은 아직 익숙치 않아서 답변하지 못한 분들이 많을 수 있지만
 중요한 내용들이니 답하지 못한 질문들은 체크해두었다가 천천히 공부하세요.
 ***************************************************/


//: [Next](@next)
